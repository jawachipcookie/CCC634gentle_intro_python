def fill_spiral(matrix, top, bottom, left, right, value):
    # Base case: If boundaries overlap, stop recursion
    if top > bottom or left > right:
        return

    # Fill the top row from left to right
    for i in range(left, right + 1):
        matrix[top][i] = value
    top += 1  # Move the top boundary down

    # Fill the right column from top to bottom
    for i in range(top, bottom + 1):
        matrix[i][right] = value
    right -= 1  # Move the right boundary left

    # Fill the bottom row from right to left, if applicable
    if top <= bottom:
        for i in range(right, left - 1, -1):
            matrix[bottom][i] = value
        bottom -= 1  # Move the bottom boundary up

    # Fill the left column from bottom to top, if applicable
    if left <= right:
        for i in range(bottom, top - 1, -1):
            matrix[i][left] = value
        left += 1  # Move the left boundary right

    # Recursive call for the inner sub-matrix
    fill_spiral(matrix, top, bottom, left, right, value)


def coil_of_ones(n):
    # Create an n x n matrix initialized with 0
    matrix = [[0 for _ in range(n)] for _ in range(n)]

    # Start the recursion to fill the matrix
    fill_spiral(matrix, 0, n - 1, 0, n - 1, 1)

    return matrix


# Function to print the matrix
def print_matrix(matrix):
    for row in matrix:
        print(row)


# Test the function
if _name_ == "_main_":
    n = int(input("Enter the size of the matrix (n): "))
    result = coil_of_ones(n)
    print("Spiral matrix of ones:")
    print_matrix(result)